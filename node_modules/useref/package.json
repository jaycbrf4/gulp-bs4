{
  "_args": [
    [
      {
        "raw": "useref@^1.2.0",
        "scope": null,
        "escapedName": "useref",
        "name": "useref",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "C:\\WAMP\\www\\gulp\\node_modules\\gulp-useref"
    ]
  ],
  "_from": "useref@>=1.2.0 <2.0.0",
  "_id": "useref@1.3.1",
  "_inCache": true,
  "_location": "/useref",
  "_nodeVersion": "6.11.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/useref-1.3.1.tgz_1509906410000_0.24479362717829645"
  },
  "_npmUser": {
    "name": "jonkemp",
    "email": "kempdogg@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "useref@^1.2.0",
    "scope": null,
    "escapedName": "useref",
    "name": "useref",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-useref"
  ],
  "_resolved": "https://registry.npmjs.org/useref/-/useref-1.3.1.tgz",
  "_shasum": "f29b7342797cb9adcdf150614135b3049bdfa2fb",
  "_shrinkwrap": null,
  "_spec": "useref@^1.2.0",
  "_where": "C:\\WAMP\\www\\gulp\\node_modules\\gulp-useref",
  "author": {
    "name": "Jonathan Kemp",
    "email": "kempdogg@gmail.com",
    "url": "http://jonkemp.com/"
  },
  "bugs": {
    "url": "https://github.com/jonkemp/useref/issues"
  },
  "dependencies": {},
  "description": "Parse build blocks in HTML files to replace references",
  "devDependencies": {
    "chai": "^4.1.2",
    "coveralls": "^3.0.0",
    "gulp": "^3.9.0",
    "gulp-eslint": "^4.0.0",
    "gulp-mocha": "^4.3.1",
    "mocha": "*",
    "nyc": "^11.3.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-5+61Xp200/u7GzUkSCAYutTu77FwqavZC9XR8VwVD9K9yxjyKAWyloYZU4JtQkNrLu7XTSwtboAy9q03oI9CbA==",
    "shasum": "f29b7342797cb9adcdf150614135b3049bdfa2fb",
    "tarball": "https://registry.npmjs.org/useref/-/useref-1.3.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "427a450712d7226860abd92053247f8d2017ebb2",
  "homepage": "https://github.com/jonkemp/useref#readme",
  "keywords": [
    "build",
    "blocks",
    "build",
    "comments",
    "replace",
    "scripts",
    "link",
    "ref"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jonkemp",
      "email": "kempdogg@gmail.com"
    }
  ],
  "name": "useref",
  "optionalDependencies": {},
  "readme": "# useref [![Build Status](https://travis-ci.org/jonkemp/useref.svg?branch=master)](https://travis-ci.org/jonkemp/useref) [![Coverage Status](https://coveralls.io/repos/jonkemp/useref/badge.svg?branch=master&service=github)](https://coveralls.io/github/jonkemp/useref?branch=master)\n\n[![NPM](https://nodei.co/npm/useref.png?downloads=true)](https://nodei.co/npm/useref/)\n\n> Parse build blocks in HTML files to replace references\n\nExtracted from the grunt plugin [grunt-useref](https://github.com/pajtai/grunt-useref).\n\n## Installation\n\n```\nnpm install useref\n```\n\n## Usage\n\n```js\nvar useref = require('useref');\nvar result = useref(inputHtml);\n// result = [ replacedHtml, { type: { path: { 'assets': [ replacedFiles] }}} ]\n```\n\n\nBlocks are expressed as:\n\n```html\n<!-- build:<type>(alternate search path) <path> <parameters> -->\n... HTML Markup, list of script / link tags.\n<!-- endbuild -->\n```\n\n- **type**: either `js`, `css` or `remove`\n- **alternate search path**: (optional) By default the input files are relative to the treated file. Alternate search path allows one to change that\n- **path**: the file path of the optimized file, the target output\n- **parameters**: extra parameters that should be added to the tag. By default `rel=\"stylesheet\"` attribute is added to css link tag, your can overwrite it by passing your own rel parameter, e.g. `rel=\"preload\"`\n\nAn example of this in completed form can be seen below:\n\n```html\n<html>\n<head>\n  <!-- build:css css/combined.css -->\n  <link href=\"css/one.css\" rel=\"stylesheet\">\n  <link href=\"css/two.css\" rel=\"stylesheet\">\n  <!-- endbuild -->\n</head>\n<body>\n  <!-- build:js scripts/combined.js -->\n  <script type=\"text/javascript\" src=\"scripts/one.js\"></script>\n  <script type=\"text/javascript\" src=\"scripts/two.js\"></script>\n  <!-- endbuild -->\n\n  <!-- build:js scripts/async.js async data-foo=\"bar\" -->\n  <script type=\"text/javascript\" src=\"scripts/three.js\"></script>\n  <script type=\"text/javascript\" src=\"scripts/four.js\"></script>\n  <!-- endbuild -->\n</body>\n</html>\n```\n\nThe module would be used with the above sample HTML as follows:\n\n```js\nvar result = useref(sampleHtml);\n\n// [\n//   resultHtml,\n//   {\n//     css: {\n//       'css/combined.css': {\n//         'assets': [ 'css/one.css', 'css/two.css' ]\n//       }\n//     },\n//     js: {\n//       'scripts/combined.js': {\n//         'assets': [ 'scripts/one.js', 'scripts/two.js' ]\n//       },\n//       'scripts/async.js': {\n//          'assets': [ 'scripts/three.js', 'scripts/four.js' ]\n//        }\n//     }\n//   }\n// ]\n```\n\n\nThe resulting HTML would be:\n\n```html\n<html>\n<head>\n  <link rel=\"stylesheet\" href=\"css/combined.css\"/>\n</head>\n<body>\n  <script src=\"scripts/combined.js\"></script>\n  <script src=\"scripts/async.js\" async data-foo=\"bar\" ></script>\n</body>\n</html>\n```\n\n## IE Conditional Comments\n\nInternet Explorer Conditional Comments are preserved. The code below:\n\n```html\n<!-- build:js scripts/combined.js   -->\n<!--[if lt IE 9]>\n<script type=\"text/javascript\" src=\"scripts/this.js\"></script>\n<script type=\"text/javascript\" src=\"scripts/that.js\"></script>\n<![endif]-->\n<!-- endbuild -->\n```\n\nResults in:\n\n```html\n<!--[if lt IE 9]>\n<script src=\"scripts/combined.js\"></script>\n<![endif]-->\n```\n\n### Custom blocks\n\nSometimes you need a bit more. If you would like to do custom processing, this is possible with a custom block, as demonstrated below.\n\n```html\n<!-- build:import components -->\n<link rel=\"import\" href=\"/bower_components/some/path\"></link>\n<!-- endbuild -->\n```\n\nWith\n\n```js\nvar useref = require('useref');\nvar result = useref(inputHtml, {\n  // each property corresponds to any blocks with the same name, e.g. \"build:import\"\n  import: function (content, target, options, alternateSearchPath) {\n    // do something with `content` and return the desired HTML to replace the block content\n    return content.replace('bower_components', target);\n  }\n});\n```\n\nBecomes\n\n```html\n<link rel=\"import\" href=\"/components/some/path\"></link>\n```\n\nThe handler function gets the following arguments:\n\n- *content* (String): The content of the custom use block\n- *target* (String): The \"path\" value of the use block definition\n- *options* (String): The extra attributes from the use block definition, the developer can parse as JSON or do whatever they want with it\n- *alternateSearchPath* (String): The alternate search path that can be used to maintain a coherent interface with standard handlers\n\nInclude a handler for each custom block type.\n\n### Symfony Twig and Laravel 5 Blade assets\n\nWorks with the [symfony2 assetic](http://symfony.com/doc/current/cookbook/assetic/asset_management.html) and [laravel asset](https://laravel.com/docs/5.1/helpers#method-asset) and [elixir](https://laravel.com/docs/5.2/elixir#versioning-and-cache-busting) links in twig or blade or html or php.\n\n```html\n<!-- build:js scripts/combined.js -->\n<script src=\"{{ asset('symfony/js/script.js') }}\"></script>\n<script src=\"{{ elixir('laravel/js/script.js') }}\"></script>\n<!-- endbuild -->\n```\n\n### Options\n\n#### options.noconcat\n\nType: `Boolean`  \nDefault: `false`  \n\nStrips out build comments but leaves the rest of the block intact without replacing any tags.\n\n```html\n<!-- build:js scripts/combined.js   -->\n<script type=\"text/javascript\" src=\"scripts/this.js\"></script>\n<script type=\"text/javascript\" src=\"scripts/that.js\"></script>\n<!-- endbuild -->\n```\n\nResults in:\n\n```html\n<script type=\"text/javascript\" src=\"scripts/this.js\"></script>\n<script type=\"text/javascript\" src=\"scripts/that.js\"></script>\n```\n\n## Contributing\n\nSee the [CONTRIBUTING Guidelines](https://github.com/jonkemp/useref/blob/master/CONTRIBUTING.md)\n\n## License\n\nMIT Â© [Jonathan Kemp](http://jonkemp.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jonkemp/useref.git"
  },
  "scripts": {
    "coverage": "nyc npm test && nyc report",
    "coveralls": "nyc npm test && nyc report --reporter=text-lcov | coveralls",
    "test": "mocha"
  },
  "version": "1.3.1"
}
